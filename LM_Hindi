{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "LM - Hindi, English, Spanish, French, Telugu, audio, video, make api/lib",
      "version": "0.3.2",
      "provenance": [],
      "collapsed_sections": [],
      "toc_visible": true,
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/MittalShruti/Dashboard/blob/master/LM_Hindi\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "JOgvbJCRIGoy",
        "colab_type": "text"
      },
      "source": [
        "# Store all links from wikipedia in a pickled file\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "uP8MlpoqHvGR",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import pickle\n",
        "from urllib.request import urlopen\n",
        "from bs4 import BeautifulSoup"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "KDwHlsbuNJG-",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "response = urlopen('https://hi.wikipedia.org/wiki/')\n",
        "\n",
        "html_page = response\n",
        "soup = BeautifulSoup(html_page, 'html.parser')"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "OrA3w45RtF0r",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#soup.prettify()"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "MvomJAFgBvXD",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# <table align=\"center\" cellspacing=\"0\" cellpadding=\"0\" style=\"border:2px solid #e1eaee; \n",
        "# border-collapse:separate;font-size:120%\">\n",
        "\n",
        "#Considering only table, because other links can have english language as well\n",
        "\n",
        "#find the element 'table' which has 'style' this\n",
        "tab = soup.find(\"table\",{\"style\":\"border:2px solid #e1eaee; border-collapse:separate;font-size:120%\"})\n",
        "anchors = tab.find_all('a')\n",
        "\n",
        "home_url = \"https://hi.wikipedia.org\"\n",
        "links = [home_url + anchor['href'] for anchor in anchors]\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Ge7DBjQLByQz",
        "colab_type": "code",
        "outputId": "33f855c0-5f44-4528-c7d2-49e5f09fdf14",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "links[1]; print(len(set(links)))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "54\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dVYwz2OZeJe4",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "EJUGS31AH9YD",
        "colab_type": "text"
      },
      "source": [
        "Visit each of the link in 'links' and store all subsequent links related to that 'letter'"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dvyLm7TQ1YtS",
        "colab_type": "code",
        "outputId": "bfed466e-9f77-47a8-e716-d23f01998611",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 9741
        }
      },
      "source": [
        "\n",
        "all_links = []\n",
        "prev_len = 0 \n",
        "for link in links:\n",
        "  while link:  #click on 'next' button\n",
        "    soup = BeautifulSoup(urlopen(link), 'html.parser')\n",
        "    ul_chunk = soup.find(\"ul\", {\"class\":\"mw-allpages-chunk\"})\n",
        "    if ul_chunk:  #if it is not NoneType\n",
        "      anchors = ul_chunk.find_all('a')\n",
        "      all_links = all_links + [home_url + anchor['href'] for anchor in anchors]\n",
        "    print(len(set(all_links))) \n",
        "    \n",
        "    if prev_len == len(set(all_links)):\n",
        "      break\n",
        "    \n",
        "    div_nav = soup.find(\"div\", {\"class\":\"mw-allpages-nav\"})\n",
        "    if div_nav and len(div_nav.find_all('a'))==2:  #if it is not NoneType # check if there are two links - 'back' and 'next'\n",
        "      link = home_url + div_nav.find_all('a')[1]['href']   #select the second link, because the first link is 'go-back'\n",
        "    #what happens if there is no next page, link will remain the previous one, and loop will continue\n",
        "    #so either set link to black on every iteration, \n",
        "    prev_len = len(set(all_links))\n",
        "    #after reaching the very LAST link, it is going in an infinite loop"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "345\n",
            "690\n",
            "1035\n",
            "1380\n",
            "1725\n",
            "2070\n",
            "2415\n",
            "2760\n",
            "3105\n",
            "3450\n",
            "3795\n",
            "4140\n",
            "4485\n",
            "4830\n",
            "5175\n",
            "5520\n",
            "5740\n",
            "5740\n",
            "6085\n",
            "6430\n",
            "6775\n",
            "7120\n",
            "7465\n",
            "7810\n",
            "8155\n",
            "8500\n",
            "8845\n",
            "9190\n",
            "9535\n",
            "9880\n",
            "10225\n",
            "10570\n",
            "10915\n",
            "11260\n",
            "11605\n",
            "11950\n",
            "12295\n",
            "12640\n",
            "12985\n",
            "13330\n",
            "13675\n",
            "14020\n",
            "14365\n",
            "14710\n",
            "15055\n",
            "15400\n",
            "15745\n",
            "16090\n",
            "16435\n",
            "16780\n",
            "17125\n",
            "17470\n",
            "17815\n",
            "18160\n",
            "18505\n",
            "18850\n",
            "19195\n",
            "19540\n",
            "19885\n",
            "20230\n",
            "20575\n",
            "20920\n",
            "21265\n",
            "21610\n",
            "21955\n",
            "22300\n",
            "22645\n",
            "22990\n",
            "23335\n",
            "23680\n",
            "24025\n",
            "24370\n",
            "24715\n",
            "25060\n",
            "25405\n",
            "25750\n",
            "26095\n",
            "26440\n",
            "26785\n",
            "27130\n",
            "27475\n",
            "27820\n",
            "28165\n",
            "28510\n",
            "28855\n",
            "29200\n",
            "29545\n",
            "29890\n",
            "30235\n",
            "30580\n",
            "30925\n",
            "31270\n",
            "31615\n",
            "31960\n",
            "32305\n",
            "32650\n",
            "32995\n",
            "33340\n",
            "33685\n",
            "34030\n",
            "34375\n",
            "34720\n",
            "35065\n",
            "35410\n",
            "35755\n",
            "36100\n",
            "36445\n",
            "36790\n",
            "37135\n",
            "37480\n",
            "37825\n",
            "38170\n",
            "38515\n",
            "38860\n",
            "39205\n",
            "39550\n",
            "39895\n",
            "40240\n",
            "40585\n",
            "40930\n",
            "41275\n",
            "41620\n",
            "41965\n",
            "42310\n",
            "42655\n",
            "43000\n",
            "43345\n",
            "43690\n",
            "44035\n",
            "44380\n",
            "44725\n",
            "45070\n",
            "45415\n",
            "45760\n",
            "46105\n",
            "46450\n",
            "46795\n",
            "47140\n",
            "47485\n",
            "47830\n",
            "48175\n",
            "48520\n",
            "48865\n",
            "49210\n",
            "49555\n",
            "49900\n",
            "50245\n",
            "50590\n",
            "50935\n",
            "51280\n",
            "51625\n",
            "51970\n",
            "52315\n",
            "52660\n",
            "53005\n",
            "53350\n",
            "53695\n",
            "54040\n",
            "54385\n",
            "54730\n",
            "55075\n",
            "55420\n",
            "55765\n",
            "56110\n",
            "56455\n",
            "56800\n",
            "57145\n",
            "57490\n",
            "57835\n",
            "58180\n",
            "58525\n",
            "58870\n",
            "59215\n",
            "59560\n",
            "59905\n",
            "60250\n",
            "60595\n",
            "60940\n",
            "61285\n",
            "61630\n",
            "61975\n",
            "62320\n",
            "62665\n",
            "63010\n",
            "63355\n",
            "63700\n",
            "64045\n",
            "64390\n",
            "64735\n",
            "65080\n",
            "65425\n",
            "65770\n",
            "66115\n",
            "66460\n",
            "66805\n",
            "67150\n",
            "67495\n",
            "67840\n",
            "68185\n",
            "68530\n",
            "68875\n",
            "69220\n",
            "69565\n",
            "69910\n",
            "70255\n",
            "70600\n",
            "70945\n",
            "71290\n",
            "71635\n",
            "71980\n",
            "72325\n",
            "72670\n",
            "73015\n",
            "73360\n",
            "73705\n",
            "74050\n",
            "74395\n",
            "74740\n",
            "75085\n",
            "75430\n",
            "75775\n",
            "76120\n",
            "76465\n",
            "76810\n",
            "77155\n",
            "77500\n",
            "77845\n",
            "78190\n",
            "78535\n",
            "78880\n",
            "79225\n",
            "79570\n",
            "79915\n",
            "80260\n",
            "80605\n",
            "80950\n",
            "81295\n",
            "81640\n",
            "81985\n",
            "82330\n",
            "82675\n",
            "83020\n",
            "83365\n",
            "83710\n",
            "84055\n",
            "84400\n",
            "84745\n",
            "85090\n",
            "85435\n",
            "85780\n",
            "86125\n",
            "86470\n",
            "86815\n",
            "87160\n",
            "87505\n",
            "87850\n",
            "88195\n",
            "88540\n",
            "88885\n",
            "89230\n",
            "89575\n",
            "89920\n",
            "90265\n",
            "90610\n",
            "90955\n",
            "91300\n",
            "91645\n",
            "91990\n",
            "92335\n",
            "92680\n",
            "93025\n",
            "93370\n",
            "93715\n",
            "94060\n",
            "94405\n",
            "94750\n",
            "95095\n",
            "95440\n",
            "95785\n",
            "96130\n",
            "96475\n",
            "96820\n",
            "97165\n",
            "97510\n",
            "97855\n",
            "98200\n",
            "98545\n",
            "98890\n",
            "99235\n",
            "99580\n",
            "99925\n",
            "100270\n",
            "100615\n",
            "100960\n",
            "101305\n",
            "101650\n",
            "101995\n",
            "102340\n",
            "102685\n",
            "103030\n",
            "103375\n",
            "103720\n",
            "104065\n",
            "104410\n",
            "104755\n",
            "105100\n",
            "105445\n",
            "105790\n",
            "106135\n",
            "106480\n",
            "106825\n",
            "107170\n",
            "107515\n",
            "107860\n",
            "108205\n",
            "108550\n",
            "108895\n",
            "109240\n",
            "109585\n",
            "109930\n",
            "110275\n",
            "110620\n",
            "110965\n",
            "111310\n",
            "111655\n",
            "112000\n",
            "112345\n",
            "112690\n",
            "113035\n",
            "113380\n",
            "113725\n",
            "114070\n",
            "114415\n",
            "114760\n",
            "115105\n",
            "115450\n",
            "115795\n",
            "116140\n",
            "116485\n",
            "116830\n",
            "117175\n",
            "117520\n",
            "117865\n",
            "118210\n",
            "118555\n",
            "118900\n",
            "119245\n",
            "119590\n",
            "119935\n",
            "120280\n",
            "120625\n",
            "120970\n",
            "121315\n",
            "121660\n",
            "122005\n",
            "122350\n",
            "122695\n",
            "123040\n",
            "123385\n",
            "123730\n",
            "124075\n",
            "124420\n",
            "124765\n",
            "125110\n",
            "125455\n",
            "125800\n",
            "126145\n",
            "126490\n",
            "126835\n",
            "127180\n",
            "127525\n",
            "127870\n",
            "128215\n",
            "128560\n",
            "128905\n",
            "129250\n",
            "129595\n",
            "129940\n",
            "130285\n",
            "130630\n",
            "130975\n",
            "131320\n",
            "131665\n",
            "132010\n",
            "132355\n",
            "132700\n",
            "133045\n",
            "133390\n",
            "133735\n",
            "134080\n",
            "134425\n",
            "134770\n",
            "135115\n",
            "135460\n",
            "135805\n",
            "136150\n",
            "136495\n",
            "136840\n",
            "137185\n",
            "137530\n",
            "137875\n",
            "138220\n",
            "138565\n",
            "138910\n",
            "139255\n",
            "139600\n",
            "139945\n",
            "140290\n",
            "140635\n",
            "140980\n",
            "141325\n",
            "141670\n",
            "142015\n",
            "142360\n",
            "142705\n",
            "143050\n",
            "143395\n",
            "143740\n",
            "144085\n",
            "144430\n",
            "144775\n",
            "145120\n",
            "145465\n",
            "145810\n",
            "146155\n",
            "146500\n",
            "146845\n",
            "147190\n",
            "147535\n",
            "147880\n",
            "148225\n",
            "148570\n",
            "148915\n",
            "149260\n",
            "149605\n",
            "149950\n",
            "150295\n",
            "150640\n",
            "150985\n",
            "151330\n",
            "151675\n",
            "152020\n",
            "152365\n",
            "152710\n",
            "153055\n",
            "153400\n",
            "153745\n",
            "154090\n",
            "154435\n",
            "154780\n",
            "155125\n",
            "155470\n",
            "155815\n",
            "156160\n",
            "156505\n",
            "156850\n",
            "157195\n",
            "157540\n",
            "157885\n",
            "158230\n",
            "158575\n",
            "158920\n",
            "159265\n",
            "159610\n",
            "159955\n",
            "160300\n",
            "160645\n",
            "160990\n",
            "161335\n",
            "161680\n",
            "162025\n",
            "162370\n",
            "162715\n",
            "163060\n",
            "163405\n",
            "163750\n",
            "164095\n",
            "164440\n",
            "164785\n",
            "165130\n",
            "165475\n",
            "165820\n",
            "166165\n",
            "166510\n",
            "166855\n",
            "167200\n",
            "167545\n",
            "167890\n",
            "168235\n",
            "168580\n",
            "168925\n",
            "169270\n",
            "169615\n",
            "169960\n",
            "170305\n",
            "170650\n",
            "170995\n",
            "171340\n",
            "171685\n",
            "172030\n",
            "172375\n",
            "172720\n",
            "173065\n",
            "173410\n",
            "173755\n",
            "174100\n",
            "174445\n",
            "174790\n",
            "175135\n",
            "175480\n",
            "175825\n",
            "176170\n",
            "176515\n",
            "176860\n",
            "177205\n",
            "177550\n",
            "177895\n",
            "178240\n",
            "178243\n",
            "178243\n",
            "178243\n",
            "178243\n",
            "178243\n",
            "178243\n",
            "178243\n",
            "178243\n",
            "178243\n",
            "178243\n",
            "178243\n",
            "178243\n",
            "178243\n",
            "178243\n",
            "178243\n",
            "178243\n",
            "178243\n",
            "178243\n",
            "178243\n",
            "178243\n",
            "178243\n",
            "178243\n",
            "178243\n",
            "178243\n",
            "178243\n",
            "178243\n",
            "178243\n",
            "178243\n",
            "178243\n",
            "178243\n",
            "178243\n",
            "178243\n",
            "178243\n",
            "178243\n",
            "178243\n",
            "178243\n",
            "178243\n",
            "178243\n",
            "178243\n",
            "178243\n",
            "178243\n",
            "178243\n",
            "178243\n",
            "178243\n",
            "178243\n",
            "178243\n",
            "178243\n",
            "178243\n",
            "178243\n",
            "178243\n",
            "178243\n",
            "178243\n",
            "178243\n",
            "178243\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "pdmWcgJHBQuY",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "all_links = list(set(all_links))\n",
        "with open('hindi_wiki_links.pkl','wb') as f:\n",
        "  pickle.dump(all_links, f)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rx98WeYyejFx",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "oT9x23xA2CDu",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        " "
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "zsWgbTMYIZMp",
        "colab_type": "text"
      },
      "source": [
        "# Scrape hindi text from each of these links "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3m2_DnKPOqdl",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import re \n",
        "\n",
        "def clean_text(articles):\n",
        "  # removing all paranthesis - (), {}, [], <> - because they may contain english (etc) language\n",
        "  # re.sub replaces 'match' with a string \n",
        "\n",
        "  articles = re.sub(r'\\([^)]*\\)',r'', articles)  #\\( and \\) => consider '(' a bracket, no special meaning; [] => match chars in square brackets; \n",
        "                                  #[^)] => match everything except ')'\n",
        "  articles = re.sub(r'\\[[^]]*\\]',r'', articles)\n",
        "  articles = re.sub(r'<[^>]*>',r'', articles)\n",
        "  articles = re.sub(r'\\{[^}]*\\}',r'', articles)\n",
        "\n",
        "  # remove text that starts with 'https://...... \\r\\n'\n",
        "  articles = re.sub(r'^https?:\\/\\/.*[\\r\\n]', r'', articles)  #\\r\\n refers to \\n 'newline' and \\r; ^ =>text starts with this\n",
        "\n",
        "  #remove all english chars from the text \n",
        "  articles = re.sub(r'[a-zA-Z]+', r'', articles) #matches 1 or more times\n",
        "\n",
        "#   #remove tab/newline character/any whitespace character\n",
        "#   articles = re.sub(r'\\s+',r' ', articles)\n",
        "\n",
        "  #remove blank spaces\n",
        "  articles = re.sub(r'[ ]+', r' ', articles)\n",
        "  articles = re.sub(r' , ', r', ', articles)\n",
        "  articles = re.sub(r'^ ', r'', articles)  # remove the starting space\n",
        "  articles = re.sub(r' $', r'', articles)  # remove the ending space \n",
        "  \n",
        "  #remove devnagri characters \n",
        "  devanagari_nums = ('०','१','२','३','४','५','६','७','८','९')\n",
        "  for c, n in enumerate(devanagari_nums):\n",
        "    articles = re.sub(n, str(c), articles)\n",
        "\n",
        "\n",
        "  return articles\n",
        "\n",
        "\n",
        "\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9e8g0xRyPaCV",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "from urllib.request import urlopen\n",
        "from bs4 import BeautifulSoup\n",
        "import pickle\n",
        "\n",
        "filename = open('hindi_wiki_links.pkl', 'rb')\n",
        "links = pickle.load(filename) \n",
        "\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "gGXB3Vk4NwSd",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import os \n",
        "\n",
        "PATH = os.path.join('data','HindiWikiArticles')\n",
        "if not os.path.exists(PATH):\n",
        "  os.makedirs(PATH)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Zeq-oOrvNwWk",
        "colab_type": "code",
        "outputId": "afe7e7d3-6c68-4eca-9390-1c9e3434f126",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "mapping_dict = {}\n",
        "PATH"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'data/HindiWikiArticles'"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "UjyK1ucuYrPN",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "for counter,link in enumerate(links[150000:159999]):\n",
        "  with urlopen(link) as response:\n",
        "    soup = BeautifulSoup(response, 'html.parser')\n",
        "    paras = soup.find_all('p')\n",
        "    \n",
        "    article = ''\n",
        "    for para in paras:\n",
        "      article = article + para.text + '\\n'\n",
        "    article = clean_text(article)  #cleaned text\n",
        "    \n",
        "    #save the entire text\n",
        "    counter = counter + 167270\n",
        "    filename = PATH + '/' + str(counter) + '.pkl'\n",
        "    mapping_dict[counter] = soup.title.string\n",
        "    with open(filename,'wb') as f:\n",
        "      pickle.dump(article, f)\n",
        "    print(filename)\n",
        "    print(soup.title.string)\n",
        "    \n",
        "    \n",
        "    "
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "25QYUcbG04Vm",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "oaHmJBl6F-6a",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "AH8OsZvMQ7fe",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "EZuWBxRIQ8XK",
        "colab_type": "text"
      },
      "source": [
        "# Tokenizer using SentencePiece"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "20fTV5WncmSY",
        "colab_type": "code",
        "outputId": "008ff593-a741-4225-c604-159934a49e9d",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "!pip install sentencepiece"
      ],
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Requirement already satisfied: sentencepiece in /usr/local/lib/python3.6/dist-packages (0.1.82)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "swp2Pkn6Q_-T",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import sentencepiece as spm"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "O5_LApstcQRa",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import pickle"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Mz-1icOocwjX",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4I1AVwpedKrL",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import os \n",
        "\n",
        "PATH = os.path.join('data','HindiWikiArticles')\n",
        "filename = PATH +'/170000.pkl'"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "aidjEZ61dK0C",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "with open(filename, 'rb') as file:\n",
        "  text = pickle.load(file) "
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dv91II9NlGCn",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#count the number of files in the data folder\n",
        "import pathlib\n",
        "\n",
        "path = pathlib.Path(PATH)\n",
        "#list of the files in this directory\n",
        "\n",
        "files = [x for x in path.glob('**/*') if x.is_file()]"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hEHNLjDbozLZ",
        "colab_type": "code",
        "outputId": "8d86b7f6-d201-4236-8a2c-4ba9c977c838",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "len(files)  #from 170000 till last, let's process more files"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "18242"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "aOP77JpSxTp4",
        "colab_type": "code",
        "outputId": "d24c7b54-d1c5-4694-e433-6bf0b5ee986e",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "files[1]"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "PosixPath('data/HindiWikiArticles/172307.pkl')"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7E-sq-gWxT6T",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 180
        },
        "outputId": "8d6c823a-fc18-4e7c-df12-5b19105819b8"
      },
      "source": [
        "files = [str(file) for file in files]\n",
        "flist = ','.join(files)"
      ],
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-6-51d77dca8c8a>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mfiles\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfile\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mfile\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mfiles\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mflist\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m','\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mjoin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfiles\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'files' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "je7dRUkeq1up",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bbTbpZtg27g6",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "fname = 'files'+ str(160000) + '.pkl'\n",
        "with open(fname,'wb') as f:\n",
        "      pickle.dump(files, f)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "eNYBGXOm27rt",
        "colab_type": "code",
        "outputId": "a85afe2e-11cd-437e-c38b-750b63a24fe7",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "with open('files160000.pkl', 'rb') as file:\n",
        "  files1 = pickle.load(file)\n",
        "\n",
        "files1 = set(files1) ; len(files1)"
      ],
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "18242"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "k4qoTx5vH6b9",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "flist = ','.join(files1)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "6dNhtxIxq18o",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "d8d89a80-1998-4b2b-d007-321a50c12373"
      },
      "source": [
        "spm.SentencePieceTrainer.Train(f'--input={flist} --model_prefix=hindi_lm --vocab_size=40000')"
      ],
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "w_P8aTpctxWJ",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "sp = spm.SentencePieceProcessor()"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "UI_ZlvSnt5vF",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "557d6fd8-83cd-4925-8de0-487ae36c7137"
      },
      "source": [
        "sp.Load(\"hindi_lm.model\")"
      ],
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "PBjhbl0bt6vj",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "061yMd6cuE9u",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import sentencepiece as spm\n",
        "import pickle\n",
        "\n",
        "filename='files160000.pkl'\n",
        "with open(filename, 'rb') as file:\n",
        "  files = pickle.load(file)\n",
        "\n",
        "files = set(files) ; print(len(files))\n",
        "flist = ','.join(files)\n",
        "spm.SentencePieceTrainer.Train(f'--input={flist} --model_prefix=hindi_lm --vocab_size=40000')\n",
        "sp = spm.SentencePieceProcessor()\n",
        "\n",
        "sp.Load(\"hindi_lm.model\")\n",
        "    \n",
        "  \n"
      ],
      "execution_count": 0,
      "outputs": []
    }
  ]
}